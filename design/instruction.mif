DEPTH = 65536;                   -- The size of memory in words
WIDTH = 8;                    -- The size of data in bits
ADDRESS_RADIX = DEC;          -- The radix for address values
DATA_RADIX = BIN;             -- The radix for data values
CONTENT                       -- start of (address : data pairs)
BEGIN
000: 00010011;  --addi	$0,$0,0 			#r0 =0		(r0=0)
001: 00000000;
002: 00000000;
003: 00000000;

004: 10010011;  --addi	$1,$0,8 			#r1 =r0+8	(r1=8)
005: 00000000;
006: 10000000;
007: 00000000;

008: 00010011;  --addi	$2,$0,4 			#r2 =r0+4	(r2=4)
009: 00000001;
010: 01000000;
011: 00000000;

012: 10110011;  --or    $3,$1,$2			#r3 =r1|r2	(r3=12) // Forwarding Test
013: 11100001;
014: 00100000;
015: 00000000;

016: 00110011;  --or	$4,$2,$0			#r4 =r2|r0	(r4=4)  // Forwarding Test
017: 01100010;
018: 00000001;
019: 00000000;

020: 00110011;  --add	$6,$4,$0			#r6 =r4+r2	(r6=8)  // Hazard test
021: 00000011;
022: 00100010;
023: 00000000;

024: 00010011; --addi	$4,$0,2 			#r4 =r0+2		(r4=2)
025: 00000010;
026: 00100000;
027: 00000000;

028: 10010011; --addi	$5,$0,-2 			#r5 =r0-2		(r5=-2)
029: 00000010;
030: 11100000;
031: 11111111;

032: 00110011; --sll 	$18,$1,$4 			#R18=R1<<R4 	(R18 = 8<<2)	
033: 10011001;
034: 01000000;
035: 00000000;

036: 10110011; --srl 	$19,$5,$4 			#R19=R5>>R4		(R19 = -2>>2) 	R19=3FFFFFF // Forwarding Test
037: 11011001;
038: 01000010;
039: 00000000;

--ERRO
040: 00110011; --sra    $20,$5,$4			#R20=R5>>>R4	(R20 = -2>>2)	R20=FFFFFFFF
041: 11011010;
042: 01000010;
043: 01000000;

044: 10110011; --slt	$21,$1,$2			#if R1<R2, R21=1	(R21=0)
045: 10101010;
046: 00100000;
047: 00000000;

048: 00110011; --slt    $22,$2,$1           #if R2<R1, R22=1    (R22=1)
049: 00101011;
050: 00010001;
051: 00000000;

052: 10110011; --sltu   $23,$5,$1           #if R5<R1, R23=1    (R23=0)
053: 10111011;
054: 00010010;
055: 00000000;

056: 00110011; --sltu   $24,$1,$5           #if R1<R5, R24=1    (R24=1)
057: 10111100;
058: 01010000;
059: 00000000;

060: 10010011; --slti   $25,$1,8            #if R1<8, R25=1     (R25=0)
061: 10101100;
062: 10000000;
063: 00000000;

064: 00010011; --slti   $26,$1,16           #if R1<16, R26=1    (R26=1)
065: 10101101;
066: 00000000;
067: 00000001;

--ERRO
068: 10010011; --addi	$5,$0,-4 			#r5 =r0-4		    (r5=-4)
069: 00000010;
070: 11100000;
071: 11111111;

072: 10010011; --sltiu  $27,$1,-2           #if R1<u(-2), R27=1 (R27=1)
073: 10111101;
074: 11100000;
075: 11111111;

--ERRO
076: 00010011; --sltiu  $28,$5,-2           #if R5<u(-2), R28=1 (R28=1)
077: 10111110;
078: 11100010;
079: 11111111;

--ERRO
080: 10010011; --slli	$29,$5,1			#R29=R5<<1 	(R29=FFFFFFF8)
081: 10011110;
082: 00010010;
083: 00000000;

--ERRO
084: 00010011; --srli	$30,$5,1			#R30=R5>>1 	(R30=7FFFFFFE)
085: 11011111;
086: 00010010;
087: 00000000;

--ERRO
088: 10010011; --srai	$31,$5,1			#R31=R5>>1	(R31=FFFFFFFE)
089: 11011111;
090: 00010010;
091: 01000000;

092: 00010011; --xori	$6,$1,10			#R6=R1 xor A	(R6=00000002)
093: 11000011;
094: 10100000;
095: 00000000;

096: 10010011; --ori    $7,$1,2				#R7=R1 or 2		(R7=0000000A)
097: 11100011;
098: 00100000;
099: 00000000;

100: 00010011; --andi	$8,$1,10			#R8=R1 and A	(R8=00000008)
101: 11110100;
102: 10100000;
103: 00000000;

104: 10110011; --xor	$9,$1,$2			#R9=R1 or R2	(R9=0000000C)
105: 11000100;
106: 00100000;
107: 00000000;

END;